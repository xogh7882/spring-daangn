# workflow 이름
name: CI/CD Pipeline

# 언제 이 workflow를 실행할래?
on:
  push:
    branches: [ main ]  # main 브랜치에 코드를 push 할 때
  workflow_dispatch:    # 수동으로 실행할 때

# 실행할 작업들을 순서대로 정의
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # 우분투 최신 버전에서 실행
    defaults:
      run:
        working-directory: ./Daangn

    steps:
      # Github 에서 소스코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v4  # 가져오는 명령어 인듯?

      # Java 23 설치
      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'        # 내 프로젝트가 23 버전이라서
          distribution: 'temurin'   # OpenJDK 배포판?

      # gradlew 파일에 실행 권한 주기
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle로 프로젝트 빌드하기 ( JAR 파일 생성 )
      - name: Build with Gradle ( Skip Test )
        run: ./gradlew build -x test --no-daemon

      # Docker Hub에 로그인하기
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # GitHub Secrets에서 가져올 것
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Image 빌드하고 Docker Hub에 Push
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Daangn          # Dockerfile이 있는 경로
          push: true          # 자동으로 push
          tags: |              # 생성할 이미지 태그들
            ${{ secrets.DOCKER_USERNAME }}/daangn:latest      
            ${{ secrets.DOCKER_USERNAME }}/daangn:${{ github.sha }} 

      # EC2 서버에 SSH로 접속해서 배포 명령어 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{secrets.EC2_USERNAME}}
          key: ${{secrets.EC2_SSH_KEY}}
          script: |
            sudo docker pull ${{secrets.DOCKER_USERNAME}}/daangn:latest
            
            sudo docker stop daangn-app || true
            sudo docker rm daangn-app || true
            
            sudo docker run -d --name daangn-app --restart unless-stopped -p 8080:8080 -e SERVER_PORT=8080 -e JDBC_URL="${{ secrets.JDBC_URL }}" -e DB_USER="${{secrets.DB_USER}}" -e DB_PASSWORD="${{secrets.DB_PASSWORD}}" -e JPA_SHOW_SQL=true -e JWT_TOKEN="${{secrets.JWT_TOKEN}}" ${{secrets.DOCKER_USERNAME}}/daangn:latest
            
            sleep 10
            sudo docker ps
            echo "배포 완료"